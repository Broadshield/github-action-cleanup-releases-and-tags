{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import {getInput, setFailed} from '@actions/core';\nimport {context} from '@actions/github';\nimport {getOctokitOptions, GitHub} from '@actions/github/lib/utils';\nimport {Octokit} from '@octokit/core';\nimport {OctokitOptions} from '@octokit/core/dist-types/types';\nimport {throttling} from '@octokit/plugin-throttling';\nimport {Endpoints} from '@octokit/types';\n\nconsole.log('Loading MyOctokit');\nconst MyOctokit = GitHub.plugin(throttling);\nconst oOptions: OctokitOptions = {\n  throttle: {\n    onRateLimit: (retryAfter: number, options: any, octokit: Octokit) => {\n      octokit.log.warn(`Request quota exhausted for request ${options.method} ${options.url}`);\n\n      if (options.request.retryCount === 0) {\n        // only retries once\n        octokit.log.info(`Retrying after ${retryAfter} seconds!`);\n        return true;\n      }\n    },\n    onAbuseLimit: (retryAfter: number, options: any, octokit: Octokit) => {\n      // does not retry, only logs a warning\n      octokit.log.warn(`Abuse detected for request ${options.method} ${options.url}`);\n    },\n  },\n};\nconst okit = new MyOctokit(\n  getOctokitOptions(getInput('github_token') ?? process.env.GITHUB_TOKEN, oOptions)\n);\nokit.log.warn('Is this working');\nconsole.log('Loading action');\nfunction basename(path: string) {\n  if (!path) return null;\n  return path.split('/').reverse()[0];\n}\n\nfunction repoSplit(inputRepo: string) {\n  if (inputRepo) {\n    const [owner, repo] = inputRepo.split('/');\n    return {owner, repo};\n  }\n  if (process.env.GITHUB_REPOSITORY) {\n    const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');\n    return {owner, repo};\n  }\n\n  if (context.payload.repository) {\n    return {\n      owner: context.payload.repository.owner.login,\n      repo: context.payload.repository.name,\n    };\n  }\n\n  setFailed(`context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'`);\n}\n\nasync function run() {\n  try {\n    console.log(`Event type is: ${context.eventName}`);\n    const {number, ref} = context.payload;\n    const branch = getInput('branch');\n    const pr_number = getInput('pr_number');\n    const repository = getInput('repository');\n    const regex = getInput('regex');\n\n    const br = branch || ref;\n    const pr = pr_number || number;\n    const searcher = pr || basename(br);\n\n    if (!searcher) {\n      setFailed(\n        'This is not a pull_request or delete event, and there was no pr_number, branch, or regex provided!'\n      );\n    }\n\n    const repos = repoSplit(repository);\n    const search_re: string = regex || `^(.*)?${searcher}(.*)?$`;\n    const matched_tags: string[] = [];\n    const matched_releases: number[] = [];\n    const VERSION_RE: RegExp = new RegExp(search_re);\n\n    console.log('Collecting repository releases');\n    type listUserReposReleasesParameters =\n      Endpoints['GET /repos/{owner}/{repo}/releases']['parameters'];\n    type listUserReposReleases =\n      Endpoints['GET /repos/{owner}/{repo}/releases']['response']['data'];\n\n    const releases: listUserReposReleases = await okit.paginate(\n      'GET /repos/:owner/:repo/releases',\n      {\n        ...repos,\n      } as listUserReposReleasesParameters\n    );\n\n    console.log(`Scanning ${releases.length} releases matching regex ${VERSION_RE}`);\n    for (const release of releases) {\n      const {id, tag_name} = release;\n\n      if (tag_name.match(VERSION_RE)) {\n        matched_releases.push(id);\n        console.log(`Deleting release id: ${id}`);\n      }\n    }\n    console.log(`Found ${matched_releases.length} matching releases`);\n    matched_releases.forEach(async (release_id) => {\n      try {\n        await okit.rest.repos.deleteRelease({repo: repos!.repo, owner: repos!.owner, release_id});\n      } catch (err) {\n        console.log(`Delete release error: ${err}`);\n      }\n    });\n    type listUserReposTagsData = Endpoints['GET /repos/{owner}/{repo}/tags']['response']['data'];\n\n    console.log('Collecting repository tags');\n    const tags: listUserReposTagsData = await okit.paginate('GET /repos/:owner/:repo/tags', {\n      ...repos,\n    });\n    console.log(`Scanning ${tags.length} tags matching regex ${VERSION_RE}`);\n    for (const tag of tags) {\n      if (tag.name.match(VERSION_RE)) {\n        matched_tags.push(`tags/${tag.name}`);\n        console.log(`Deleting tag: ${tag.name}`);\n      }\n    }\n    console.log(`Found ${matched_tags.length} matching tags`);\n    matched_tags.forEach(async (tag_ref) => {\n      try {\n        await okit.rest.git.deleteRef({repo: repos!.repo, owner: repos!.owner, ref: tag_ref});\n      } catch (err) {\n        console.log(`Delete ref error: ${err}`);\n      }\n    });\n  } catch (error: any) {\n    setFailed(error.message ?? error);\n  }\n}\nconsole.log('Starting action');\nrun();\nconsole.log('Ending action');\n"],
  "mappings": "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",
  "names": []
}
